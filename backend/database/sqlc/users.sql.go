// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
)

const getUserLastID = `-- name: GetUserLastID :one
SELECT id FROM users ORDER BY id DESC LIMIT 1
`

func (q *Queries) GetUserLastID(ctx context.Context) (string, error) {
	row := q.queryRow(ctx, q.getUserLastIDStmt, getUserLastID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, created_at, updated_at, email_address FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EmailAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByID = `-- name: GetUsersByID :one
SELECT id, name, created_at, updated_at, email_address FROM users WHERE id = ?
`

func (q *Queries) GetUsersByID(ctx context.Context, id string) (User, error) {
	row := q.queryRow(ctx, q.getUsersByIDStmt, getUsersByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailAddress,
	)
	return i, err
}

const getUsersByIDWithSpecificField = `-- name: GetUsersByIDWithSpecificField :one
SELECT id, name FROM users WHERE id = ?
`

type GetUsersByIDWithSpecificFieldRow struct {
	ID   string `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) GetUsersByIDWithSpecificField(ctx context.Context, id string) (GetUsersByIDWithSpecificFieldRow, error) {
	row := q.queryRow(ctx, q.getUsersByIDWithSpecificFieldStmt, getUsersByIDWithSpecificField, id)
	var i GetUsersByIDWithSpecificFieldRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (id, name, email_address) VALUES (?, ?, ?)
`

type InsertUserParams struct {
	ID           string `db:"id" json:"id"`
	Name         string `db:"name" json:"name"`
	EmailAddress string `db:"email_address" json:"email_address"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser, arg.ID, arg.Name, arg.EmailAddress)
	return err
}
