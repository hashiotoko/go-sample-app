// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6SUT2/TMBjGv0p54Zg12XapfENCGrszLtMOJnnXeEpiYzuDKYrEmhMa/zQhENxAaCCm",
	"TTtNRUx8GS8rfAtkd2nL1jFQT3ar18/r5/f4TQEhTwXPMNMKSAEqjDGlbruiUNoVH9NUJGi3LAIy70FG",
	"UwQCg9dHp/2D+tPXX9ULKD0QkguUmqFqaguIUIWSCc14BgRMtWeqE9M7NtXJ8h3wYJ3LlGogwDK9uAAe",
	"6C2Bw5/YRWlVh83+plS/ej4+qbRkWRfK0gOJD3MmMQKyam9zLrU2KuUPNjDUUNpalq1z20Uzba1Cl88p",
	"Z3uOCgEebKJUw85BO2gH9mJcYEYFAwKL7aC9CB4IqmPn3aeC+ZvzflciansdUkAX9WUbZ8++nO0cm+qD",
	"qSrT++4s9U1vt375pv7x1my/M70dcK0ktUeWIyCwhPq2YPfnlxp1a1UJnqkh+YUgsEvIM42Za0qFSFjo",
	"FPwNZTs3Sf8RMNzFJOFe6xGXSXRjCtPSu3D/ezG2LGZUuhVT1VJ5GCJGGLVdAipPUyq3Rkbdnw2cXKFU",
	"V5KZDPi0/+Tn3ud/xbLidGdkwjSm7uAtietA4KY/nhP/fEh8NyHlCBOVkm7NRGmK6e3DoenL6PzCLstR",
	"eSXDwdNv9eF7s304qftfGFdcB/e0JU1Ru8RWC2BW3j53GH0N8qZ0PHZa5uhNQL122su1GWO7Pq0Z0pmO",
	"cyIgW41ys4F08UEfuEP7ptof7B7VHyvwIJcJEIi1FsT3Ex7SJOZKk06n04FyrfwdAAD//+pm8fWeBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
